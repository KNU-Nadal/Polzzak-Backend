name: Deploy

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install sshpass
      run: sudo apt-get install -y sshpass

    - name: Generate config.py
      run: |
        echo "import os" >> config.py
        echo "BASE_DIR = $BASE_DIR" >> config.py
        echo "SQLALCHEMY_DATABASE_URI = $SQLALCHEMY_DATABASE_URI" >> config.py
        echo "SQLALCHEMY_TRACK_MODIFICATIONS = $SQLALCHEMY_TRACK_MODIFICATIONS" >> config.py
        echo "SECRET_KEY = $SECRET_KEY" >> config.py
        echo "KAKAO_CLIENT_ID = $KAKAO_CLIENT_ID" >> .env
      env: 
        BASE_DIR: ${{ secrets.BASE_DIR }}
        SQLALCHEMY_DATABASE_URI: ${{ secrets.SQLALCHEMY_DATABASE_URI }}
        SQLALCHEMY_TRACK_MODIFICATIONS: ${{ secrets.SQLALCHEMY_TRACK_MODIFICATIONS }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}

    - name: Copy Files to Remote Server
      run: |
        sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -o StrictHostKeyChecking=no -r ./* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.WORK_PATH }}

    - name: Build and Deploy Docker Image on Remote Server
      run: |
        sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          cd ${{ secrets.WORK_PATH }}
          docker build -t ${{ secrets.IMAGE }} .
          docker stop ${{ secrets.CONTAINER }} || true
          docker rm ${{ secrets.CONTAINER }} || true
          docker run -d --name ${{ secrets.CONTAINER }} -p ${{ secrets.DOCKER_EX_PORT }}:${{ secrets.DOCKER_IN_PORT }} ${{ secrets.IMAGE }}
        EOF
